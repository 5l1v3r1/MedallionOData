using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Medallion.OData.Trees;
using PropertyPath = System.Collections.Generic.IReadOnlyList<System.Reflection.PropertyInfo>;

namespace Medallion.OData.Service
{
//    internal class ODataQueryProjector
//    {
//        /* Generated by
//         var range = Enumerable.Range(1, 10);
//string.Format(@"private static readonly object Projection = new {{ {0} }};",
//    range.Select(i => "T" + i + " = default(bool)").ToDelimitedString(", "))
//    .Dump();;
//         */
//        private static readonly object Projection = new { T1 = default(bool), T2 = default(bool), T3 = default(bool), T4 = default(bool), T5 = default(bool), T6 = default(bool), T7 = default(bool), T8 = default(bool), T9 = default(bool), T10 = default(bool) };
//        private static readonly Type ProjectionType = Projection.GetType().GetGenericTypeDefinition();
//        private static readonly IReadOnlyList<PropertyInfo> ProjectionTypeProperties = ProjectionType.GetProperties();
//        private static readonly IEqualityComparer<PropertyPath> PathComparer = EqualityComparers.Create<PropertyPath>(
//            (p1, p2) => p1.SequenceEqual(p2, Helpers.MemberComparer), 
//            p => p.Aggregate(0, (h, pi) => h ^ Helpers.MemberComparer.GetHashCode(pi))
//        );

//        public IQueryable Project(IQueryable query, IReadOnlyList<ODataSelectColumnExpression> select)
//        {
//            if (select.Count == 0)
//            {
//                return this.Project(query, new[] { ODataExpression.SelectStar() });
//            }

//            Throw<NotSupportedException>.If(select.Any(sc => !sc.AllColumns && sc.Type == ODataExpressionType.Complex), "Selecting a complex type is only supported when selecting all columns of that type (with '/*')");

//            var selectColumnPropertyPaths = select.ToDictionary(
//                sc => sc,
//                sc => Traverse.Along(sc.Expression, c => c.Expression)
//                    .Select(m => m.Member)
//                    .Reverse()
//                    .ToArray()
//            );
//            var mapping = BuildMapping(selectColumnPropertyPaths.Values);
			

//        }

//        private static NewExpression BuildNewExpression(ParameterExpression rootParameter, IReadOnlyCollection<KeyValuePair<PropertyPath, PropertyPath>> mapping)
//        {
//            var nestedProperties = mapping.Where(kvp => kvp.Key.Count > 1).ToArray();
//            var nestedExpression = nestedProperties.Length > 0
//                ? BuildNewExpression(rootParameter, nestedProperties.Select(kvp => KeyValuePair.Create(kvp.Key.Skip(1).ToArray().As<PropertyPath>(), kvp.Value)).ToArray())
//                : Expression.Constant(false).As<Expression>();

//            var arguments = ProjectionTypeProperties.Take(ProjectionTypeProperties.Count - 1)
//                .Select(pi => mapping.FirstOrDefault())
//                .Select(kvp => kvp.Value.Aggregate(rootParameter.As<Expression>, (acc, pi) => Expression.MakeMemberAccess(acc, pi)))
//                .ToList();
//        }

//        private static Dictionary<PropertyPath, PropertyPath> BuildMapping(IEnumerable<PropertyPath> paths)
//        {
//            var result = new Dictionary<PropertyPath, PropertyPath>(PathComparer);
//            var nextProperty = 0;
//            var nextPropertyNestLevel = 0;
//            foreach (var path in paths)
//            {
//                result[path] = Enumerable.Repeat(ProjectionTypeProperties[ProjectionTypeProperties.Count - 1], nextPropertyNestLevel)
//                    .Concat(ProjectionTypeProperties[nextProperty].Enumerate())
//                    .ToArray();
//                if (nextProperty == ProjectionTypeProperties.Count - 1)
//                {
//                    nextPropertyNestLevel++;
//                    nextProperty = 0;
//                }
//            }

//            return result;
//        }

//        public class Result
//        {
//            private readonly IQueryable _projected;
//            private readonly IReadOnlyDictionary<SelectedColumn, PropertyPath> _mapping;

//            Result(IQueryable projected, IReadOnlyDictionary<SelectedColumn, PropertyPath> mapping)
//            {
//                Throw.IfNull(projected, "projected");
//                Throw.If(mapping.IsNullOrEmpty(), "mapping: must not be null or empty");

//                this._projected = projected;
//                this._mapping = mapping;
//            }

//            public IQueryable Projected { get { return this._projected; } }
//            public IReadOnlyDictionary<SelectedColumn, PropertyPath> Mapping { get { return this._mapping; } } 
//        }

//    }
}
